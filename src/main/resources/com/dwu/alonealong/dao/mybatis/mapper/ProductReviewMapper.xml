<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dwu.alonealong.dao.mybatis.mapper.ProductReviewMapper">

  <cache />
  
  <select id="getProductReview" resultType="ProductReview">
     SELECT
    	PR.REVIEW_ID as reviewId, 
    	PR.PRODUCT_ID as productId, 
    	PR.USER_ID as userId, 
    	PR.REVIEW_DATE as reviewDate,
    	PR.REVIEW_RATING as rating,
    	PR.REVIEW_CONTENTS as reviewContents,
    	PR.REVIEW_RECOMMEND as recommend,
    	USERINFO.NICKNAME as nickname,
		NVL2(#{userId, jdbcType=VARCHAR}, COUNT(CASE WHEN REC.RECOMMEND_USER = #{userId, jdbcType=VARCHAR} THEN 1 END), 0) as checkRecommend
    FROM PRODUCT_REVIEW PR
	LEFT OUTER JOIN USERINFO ON PR.USER_ID = USERINFO.USER_ID
	LEFT OUTER JOIN PRODUCT_REVIEW_RECOMMEND REC ON PR.REVIEW_ID = REC.REVIEW_ID
    WHERE PR.REVIEW_ID = #{reviewId}
	GROUP BY PR.REVIEW_ID, PR.PRODUCT_ID, PR.USER_ID, PR.REVIEW_DATE, PR.REVIEW_RATING, 
	PR.REVIEW_CONTENTS, PR.REVIEW_RECOMMEND, USERINFO.NICKNAME
  </select>
  
  <select id="getProductReviewList" resultType="ProductReview">
     SELECT
    	PR.REVIEW_ID as reviewId, 
    	PR.PRODUCT_ID as productId, 
    	PR.USER_ID as userId, 
    	PR.REVIEW_DATE as reviewDate,
    	PR.REVIEW_RATING as rating,
    	PR.REVIEW_CONTENTS as reviewContents,
    	PR.REVIEW_RECOMMEND as recommend,
    	USERINFO.NICKNAME as nickname,
		NVL2(#{userId, jdbcType=VARCHAR}, COUNT(CASE WHEN REC.RECOMMEND_USER = #{userId, jdbcType=VARCHAR} THEN 1 END), 0) as checkRecommend
    FROM PRODUCT_REVIEW PR
	LEFT OUTER JOIN USERINFO ON PR.USER_ID = USERINFO.USER_ID
	LEFT OUTER JOIN PRODUCT_REVIEW_RECOMMEND REC ON PR.REVIEW_ID = REC.REVIEW_ID
    WHERE PR.PRODUCT_ID = #{productId}
	GROUP BY PR.REVIEW_ID, PR.PRODUCT_ID, PR.USER_ID, PR.REVIEW_DATE, PR.REVIEW_RATING, 
	PR.REVIEW_CONTENTS, PR.REVIEW_RECOMMEND, USERINFO.NICKNAME
    ORDER BY PR.REVIEW_DATE DESC
  </select>
  
  <select id="getProductReviewListByRecommend" resultType="ProductReview">
     SELECT
    	PR.REVIEW_ID as reviewId, 
    	PR.PRODUCT_ID as productId, 
    	PR.USER_ID as userId, 
    	PR.REVIEW_DATE as reviewDate,
    	PR.REVIEW_RATING as rating,
    	PR.REVIEW_CONTENTS as reviewContents,
    	PR.REVIEW_RECOMMEND as recommend,
    	USERINFO.NICKNAME as nickname,
		COUNT(CASE WHEN REC.RECOMMEND_USER = #{userId} THEN 1 END) as checkRecommend
    FROM PRODUCT_REVIEW PR
	LEFT OUTER JOIN USERINFO ON PR.USER_ID = USERINFO.USER_ID
	LEFT OUTER JOIN PRODUCT_REVIEW_RECOMMEND REC ON PR.REVIEW_ID = REC.REVIEW_ID
    WHERE PR.PRODUCT_ID = #{productId}
	GROUP BY PR.REVIEW_ID, PR.PRODUCT_ID, PR.USER_ID, PR.REVIEW_DATE, PR.REVIEW_RATING, 
	PR.REVIEW_CONTENTS, PR.REVIEW_RECOMMEND, USERINFO.NICKNAME
    ORDER BY PR.REVIEW_RECOMMEND DESC
  </select>
  
  <select id="getProductReviewListByLowRating" resultType="ProductReview">
     SELECT
    	PR.REVIEW_ID as reviewId, 
    	PR.PRODUCT_ID as productId, 
    	PR.USER_ID as userId, 
    	PR.REVIEW_DATE as reviewDate,
    	PR.REVIEW_RATING as rating,
    	PR.REVIEW_CONTENTS as reviewContents,
    	PR.REVIEW_RECOMMEND as recommend,
    	USERINFO.NICKNAME as nickname,
		COUNT(CASE WHEN REC.RECOMMEND_USER = #{userId} THEN 1 END) as checkRecommend
    FROM PRODUCT_REVIEW PR
	LEFT OUTER JOIN USERINFO ON PR.USER_ID = USERINFO.USER_ID
	LEFT OUTER JOIN PRODUCT_REVIEW_RECOMMEND REC ON PR.REVIEW_ID = REC.REVIEW_ID
    WHERE PR.PRODUCT_ID = #{productId}
	GROUP BY PR.REVIEW_ID, PR.PRODUCT_ID, PR.USER_ID, PR.REVIEW_DATE, PR.REVIEW_RATING, 
	PR.REVIEW_CONTENTS, PR.REVIEW_RECOMMEND, USERINFO.NICKNAME
    ORDER BY PR.REVIEW_RATING
  </select>
  
  <select id="getProductReviewListByHighRating" resultType="ProductReview">
     SELECT
    	PR.REVIEW_ID as reviewId, 
    	PR.PRODUCT_ID as productId, 
    	PR.USER_ID as userId, 
    	PR.REVIEW_DATE as reviewDate,
    	PR.REVIEW_RATING as rating,
    	PR.REVIEW_CONTENTS as reviewContents,
    	PR.REVIEW_RECOMMEND as recommend,
    	USERINFO.NICKNAME as nickname,
		COUNT(CASE WHEN REC.RECOMMEND_USER = #{userId} THEN 1 END) as checkRecommend
    FROM PRODUCT_REVIEW PR
	LEFT OUTER JOIN USERINFO ON PR.USER_ID = USERINFO.USER_ID
	LEFT OUTER JOIN PRODUCT_REVIEW_RECOMMEND REC ON PR.REVIEW_ID = REC.REVIEW_ID
    WHERE PR.PRODUCT_ID = #{productId}
	GROUP BY PR.REVIEW_ID, PR.PRODUCT_ID, PR.USER_ID, PR.REVIEW_DATE, PR.REVIEW_RATING, 
	PR.REVIEW_CONTENTS, PR.REVIEW_RECOMMEND, USERINFO.NICKNAME
    ORDER BY PR.REVIEW_RATING DESC
  </select>
  
  <select id="getProductReviewListByUserId" resultType="ProductReview">
     SELECT
    	PR.REVIEW_ID as reviewId, 
    	PR.PRODUCT_ID as productId, 
    	PR.USER_ID as userId, 
    	PR.REVIEW_DATE as reviewDate,
    	PR.REVIEW_RATING as rating,
    	PR.REVIEW_CONTENTS as reviewContents,
    	PR.REVIEW_RECOMMEND as recommend,
    	USERINFO.NICKNAME as nickname
    FROM PRODUCT_REVIEW PR
	LEFT OUTER JOIN USERINFO ON PR.USER_ID = USERINFO.USER_ID
    WHERE PR.PRODUCT_ID = #{productId}
    ORDER BY PR.USER_ID = #{userId}
  </select>
  
  <insert id="insertProductReview" parameterType="productReview">
     INSERT INTO PRODUCT_REVIEW
     VALUES (
     	PRODUCTREVIEW_SEQ.NEXTVAL,
     	#{productId}, 
     	#{userId},
     	SYSDATE,
     	#{rating},
     	#{reviewContents},
     	'0'
     )
  </insert>
  
  <update id="updateProductReview" parameterType="productReview">
        UPDATE PRODUCT_REVIEW
        SET
        	REVIEW_RATING = #{rating},
        	REVIEW_CONTENTS = #{reviewContents},
        	REVIEW_RECOMMEND = #{recommend}
        WHERE
        	REVIEW_ID = #{reviewId}
   </update>
   
  <delete id="deleteProductReview">
  	DELETE
    FROM PRODUCT_REVIEW
    WHERE REVIEW_ID = #{reviewId}
  </delete>
  
  
  <select id="numOfReviews" resultType="int">
    SELECT COUNT(REVIEW_ID)
    FROM PRODUCT_REVIEW
    WHERE PRODUCT_ID = #{productId}
  </select>
  
  
  <select id="averageOfReviews" resultType="Double">
    SELECT DECODE(AVG(REVIEW_RATING), null, 0, AVG(REVIEW_RATING))
    FROM PRODUCT_REVIEW
    WHERE PRODUCT_ID = #{productId}
  </select>
  
  
  <select id="mostRatingOfReviews" resultType="int">
	SELECT DECODE(SUM(REVIEW_RATING), null, 0, SUM(REVIEW_RATING))
	FROM (SELECT REVIEW_RATING, COUNT(*) AS CNT 
	    FROM PRODUCT_REVIEW 
	    WHERE PRODUCT_ID = #{productId}
	    GROUP BY REVIEW_RATING
	    ORDER BY CNT DESC)
	WHERE ROWNUM = '1'
  </select>
  
  <delete id="deleteProductReviewRecommendByReviewId">
  	DELETE
    FROM PRODUCT_REVIEW_RECOMMEND
    WHERE REVIEW_ID = #{reviewId}
  </delete>
  
  <delete id="deleteProductReviewRecommend">
  	DELETE
    FROM PRODUCT_REVIEW_RECOMMEND
    WHERE REVIEW_ID = #{reviewId} AND RECOMMEND_USER = #{userId}
  </delete>
  
  <insert id="insertProductReviewRecommend">
     INSERT INTO PRODUCT_REVIEW_RECOMMEND
     VALUES (
     	#{reviewId}, 
     	#{userId}
     )
  </insert>
  
</mapper>